[tool.poetry]
name = "magic_mirror_backend"
version = "0.1.0"
description = ""
authors = ["Demir Catovic <d.catovic9@gmail.com>"]
readme = "README.md"
packages = [
    { include = "chatbot", from = "src/magic_mirror_backend" }, 
    { include = "api", from = "src/magic_mirror_backend" },
    ]

[tool.poetry.dependencies]
python = "==3.11.4"
fastapi = {extras = ["uvicorn"], version = "^0.101.0"}
uvicorn = {extras = ["standard"], version = "^0.23.2"}
transformers = {extras = ["torch"], version = "^4.31.0"}
langchain = "^0.0.262"
bitsandbytes = "^0.41.1"
scipy = "^1.11.2"
python-multipart = "^0.0.6"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.group.dev.dependencies]
pytest = "^7.2.1"
pytest-cov = "^4.0.0"
coverage = "^7.0.5"
nox = "^2022.11.21"
mypy = "^0.991"
black = "^22.12.0"
pytest-mock = "^3.10.0"
isort = "^5.12.0"
ruff = "^0.0.246"
codecov = "^2.1.12"
httpx = "^0.24.1"


[tool.poetry.group.formatting.dependencies]
black = "^22.12.0"
isort = "^5.12.0"


[tool.poetry.group.static_type_checking.dependencies]
mypy = "^0.991"


[tool.poetry.group.testing.dependencies]
pytest = "^7.2.1"
pytest-cov = "^4.0.0"
pytest-mock = "^3.10.0"
httpx = "^0.24.1" # for testing FastAPIs


[tool.poetry.group.linting.dependencies]
ruff = "^0.0.246"



[tool.poetry.group.code_coverage_reporting.dependencies]
codecov = "^2.1.12"
pytest = "^7.2.1"
pytest-cov = "^4.0.0"
pytest-mock = "^3.10.0"

[tool.black]
target-version = ["py311"]


[tool.isort]
profile = "black"
known_first_party = ["chatbot", "api"]


[tool.mypy]
disallow_untyped_defs = true
disallow_any_unimported = true
no_implicit_optional = true
check_untyped_defs = true
warn_return_any = true
warn_unused_ignores = true
show_error_codes = true


[[tool.mypy.overrides]]
module = "tests.*"
ignore_missing_imports = true


[tool.pytest.ini_options]
minversion = 7.0
addopts = "--cov"
testpaths = [
    "tests",
]

[tool.coverage.paths]
source = ["src"]


[tool.coverage.run]
branch = true
source = [
     "chatbot",
     "api",
     ]


[tool.coverage.report]
show_missing = true
fail_under = 100


[tool.ruff]
select = [
    "E",  # pycodestyle errors - pep8 style check
    "W",  # pycodestyle warnings - pep8 style check
    "F",  # pyflakes - only errors, no style check
    "S",  # flake8-bandit - static security check
    "C",  # flake8-comprehensions - checks list/set/dict comprehensions
    "B",  # flake8-bugbear - checks common bugs
]
ignore = [
    "E501",  # line too long, handled by black
    "C901",  # mccabe code complexity analysis, not useful
    "S101",  # use of "assert" flagged by bandit, needed for tests
]
target-version = "py311"
